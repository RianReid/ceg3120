AWSTemplateFormatVersion: 2010-09-09
Description: >-
  Cloud configuration file for CEG 3120.  This template will build two Ubuntu servers per project package needs.
Parameters:
  
  UbuntuInstanceType:
    Description: Ubuntu Server instance type
    Type: String
    Default: t2.micro
    AllowedValues:
      - t2.micro
  KeyName:
    Description: Name of an existing EC2 KeyPair to enable SSH access to the instance
    Type: 'AWS::EC2::KeyPair::KeyName'
    ConstraintDescription: must be the name of an existing EC2 KeyPair.
  SSHLocation:
    Description: ' The IP address range that can be used to access the EC2 instance'
    Type: String
    MinLength: '9'
    MaxLength: '18'
    # could restrict to home (note this is just SSH)
    Default: 0.0.0.0/0
    AllowedPattern: '(\d{1,3})\.(\d{1,3})\.(\d{1,3})\.(\d{1,3})/(\d{1,2})'
    ConstraintDescription: must be a valid IP CIDR range of the form x.x.x.x/x.
Mappings:
  AWSInstanceType2Arch:  # Supported architectures (x64bit only)
    t2.micro:
      Arch: HVM64
  
  AWSRegionUbuntu: # AMI for Ubuntu server in each supported region 
    us-east-1:   # N. Virginia
      PV64: NOT_SUPPORTED
      #TODO: is this the AMI we want?
      HVM64: ami-0885b1f6bd170450c
      HVMG2: NOT_SUPPORTED
    us-east-2:   # Ohio
      PV64: NOT_SUPPORTED
      HVM64: NOT_SUPPORTED
      HVMG2: NOT_SUPPORTED
 
Resources:
  VPC:
    Type: 'AWS::EC2::VPC'
    Properties:
      CidrBlock: 10.0.0.0/16
      Tags:
        - Key: Application
          Value: !Ref 'AWS::StackId'
        - Key: Name
          Value: CEG 3120 VPC
  Subnet:
    Type: 'AWS::EC2::Subnet'
    Properties:
      VpcId: !Ref VPC
      CidrBlock: 10.0.0.0/24
      Tags:
        - Key: Application
          Value: !Ref 'AWS::StackId'
        - Key: Name
          Value: CEG 3120 VPC
  # Have not messed with route tables / gateways before.
  # Look to see if anything unique, else move to next
  InternetGateway:
    Type: 'AWS::EC2::InternetGateway'
    Properties:
      Tags:
        - Key: Application
          Value: !Ref 'AWS::StackId'
  AttachGateway:
    Type: 'AWS::EC2::VPCGatewayAttachment'
    Properties:
      VpcId: !Ref VPC
      InternetGatewayId: !Ref InternetGateway
  RouteTable:
    Type: 'AWS::EC2::RouteTable'
    Properties:
      VpcId: !Ref VPC
      Tags:
        - Key: Application
          Value: !Ref 'AWS::StackId'
  Route:
    Type: 'AWS::EC2::Route'
    DependsOn: AttachGateway
    Properties:
      RouteTableId: !Ref RouteTable
      DestinationCidrBlock: 0.0.0.0/0
      GatewayId: !Ref InternetGateway
  SubnetRouteTableAssociation:
    Type: 'AWS::EC2::SubnetRouteTableAssociation'
    Properties:
      SubnetId: !Ref Subnet
      RouteTableId: !Ref RouteTable
  # will also have 2 servers, keeping naming convention here
  Ubuntu1IPAddress:
    Type: 'AWS::EC2::EIP'
    DependsOn: AttachGateway
    Properties:
      Domain: vpc
      InstanceId: !Ref Ubuntu1Instance
  Ubuntu2IPAddress:
    Type: 'AWS::EC2::EIP'
    DependsOn: AttachGateway
    Properties:
      Domain: vpc
      InstanceId: !Ref Ubuntu2Instance
 
  # TODO: Setup the security groups needed by our machines
  # SSH, LDAP, HTTP, HTTPS
  LinuxSecurityGroup:
    Type: 'AWS::EC2::SecurityGroup'
    Properties:
      VpcId: !Ref VPC
      GroupDescription: Enable SSH access via port 22 and open ports 1025 through 2048.
      SecurityGroupIngress:
        - IpProtocol: tcp
          FromPort: '22'
          ToPort: '22'
          CidrIp: !Ref SSHLocation
        - IpProtocol: tcp
          FromPort: '22'
          ToPort: '22'
        - IpProtocol: tcp
          FromPort: '80'
          ToPort: '80'
          CidrIp: 0.0.0.0/0
        - IpProtocol: tcp
          FromPort: '80'
          ToPort: '80'
          
  # Tie an instance to an instance type available in the region
  # TODO: Modify / append the following two instances for our usage
  #   Adjust key / value pairs to reflect systems we are creating
  Ubuntu1Instance:
    Type: 'AWS::EC2::Instance'
    DependsOn: AttachGateway
    Properties:
      ImageId: !FindInMap 
        - AWSRegionUbuntu
        - !Ref 'AWS::Region'
        - !FindInMap 
          - AWSInstanceType2Arch
          - !Ref UbuntuInstanceType
          - Arch
      InstanceType: !Ref UbuntuInstanceType
      KeyName: !Ref KeyName
      Tags:
        - Key: Application
          Value: !Ref 'AWS::StackId'
        - Key: Name
          Value: Apache1
      NetworkInterfaces:
        - GroupSet:
            - !Ref LinuxSecurityGroup
          AssociatePublicIpAddress: 'true'
          DeviceIndex: '0'
          DeleteOnTermination: 'true'
          SubnetId: !Ref Subnet
          PrivateIpAddress: 10.0.0.30
      UserData:
        Fn::Base64:
          !Sub |
            #!/bin/bash -xe
            apt-get update && \
            apt-get install -y \
              python \
              nmap \
              vim \
              git \
              wget \
              python3-dev \
              apache2 && \
              wget https://raw.githubusercontent.com/pattonsgirl/Fall2020-CEG3120/master/Projects/Project2/index-serv1.html && \
              cp index-serv1.html /var/www/html/index.html && \
              echo "Apache1" > /etc/hostname && \
              echo "ssh-rsa AAAAB3NzaC1yc2EAAAADAQABAAABAQCSDPoQZ0CqBqzTJfustJjCUc7g8KC3K8BIwJInpKjgG/UNMHl/Sb/QTdLClZXnMmtsjMr9S3C4fXiGyhro3IVZotLs1dos5AfV7q9/bMX2zFqvsc/IjFDZ/MjgdQ432HniHKHYt60e57DI5yJHT832Ik2w9HClFlobWOIrUvuFv4FN0oByC4bcfL7DLgPbAWmZHDdPRT0A0CflfbLT42k4x8xBCM9oBrRKNEqHi2B31nW3AkF0wb3CvbzfTb5mMaAzs4cAA+GD94/TodIOhD9g+yDtfxgE/x3+6HGRTWZJXxSYzVPLn5gGxb09uOTLsgCKtV4cJ29Xvy4FSuoffT7f ceg3120-key" >> /home/ubuntu/.ssh/authorized_keys && \
            reboot
  Ubuntu2Instance:
    Type: 'AWS::EC2::Instance'
    DependsOn: AttachGateway
    Properties:
      ImageId: !FindInMap 
        - AWSRegionUbuntu
        - !Ref 'AWS::Region'
        - !FindInMap 
          - AWSInstanceType2Arch
          - !Ref UbuntuInstanceType
          - Arch
      InstanceType: !Ref UbuntuInstanceType
      KeyName: !Ref KeyName
      Tags:
        - Key: Application
          Value: !Ref 'AWS::StackId'
        - Key: Name
          Value: Apache2
      NetworkInterfaces:
        - GroupSet:
            - !Ref LinuxSecurityGroup
          AssociatePublicIpAddress: 'true'
          DeviceIndex: '0'
          DeleteOnTermination: 'true'
          SubnetId: !Ref Subnet
          PrivateIpAddress: 10.0.0.35
      UserData:
        Fn::Base64:
          !Sub |
            #!/bin/bash -xe
            apt-get update && \
            apt-get install -y \
              python \
              nmap \
              vim \
              git \
              wget \
              python3-dev \
              apache2 && \
              wget https://raw.githubusercontent.com/pattonsgirl/Fall2020-CEG3120/master/Projects/Project2/index-serv2.html && \
              cp index-serv2.html/var/www/html/index.html && \
              echo "Apache2" > /etc/hostname && \
              echo "ssh-rsa AAAAB3NzaC1yc2EAAAADAQABAAABAQCSDPoQZ0CqBqzTJfustJjCUc7g8KC3K8BIwJInpKjgG/UNMHl/Sb/QTdLClZXnMmtsjMr9S3C4fXiGyhro3IVZotLs1dos5AfV7q9/bMX2zFqvsc/IjFDZ/MjgdQ432HniHKHYt60e57DI5yJHT832Ik2w9HClFlobWOIrUvuFv4FN0oByC4bcfL7DLgPbAWmZHDdPRT0A0CflfbLT42k4x8xBCM9oBrRKNEqHi2B31nW3AkF0wb3CvbzfTb5mMaAzs4cAA+GD94/TodIOhD9g+yDtfxgE/x3+6HGRTWZJXxSYzVPLn5gGxb09uOTLsgCKtV4cJ29Xvy4FSuoffT7f ceg3120-key" >> /home/ubuntu/.ssh/authorized_keys && \
            reboot
Ubuntu3Instance:
    Type: 'AWS::EC2::Instance'
    DependsOn: AttachGateway
    Properties:
      ImageId: !FindInMap 
        - AWSRegionUbuntu
        - !Ref 'AWS::Region'
        - !FindInMap 
          - AWSInstanceType2Arch
          - !Ref UbuntuInstanceType
          - Arch
      InstanceType: !Ref UbuntuInstanceType
      KeyName: !Ref KeyName
      Tags:
        - Key: Application
          Value: !Ref 'AWS::StackId'
        - Key: Name
          Value: ProxyServer
      NetworkInterfaces:
        - GroupSet:
            - !Ref LinuxSecurityGroup
          AssociatePublicIpAddress: 'true'
          DeviceIndex: '0'
          DeleteOnTermination: 'true'
          SubnetId: !Ref Subnet
          PrivateIpAddress: 10.0.0.40
      UserData:
        Fn::Base64:
          !Sub |
            #!/bin/bash -xe
            apt-get update && \
            apt-get install -y \
              python \
              nmap \
              vim \
              git \
              wget \
              python3-dev \
              haproxy && \
              echo "ProxyServer" > /etc/hostname && \
              echo "frontend http_front bind *:80 stats uri /haproxy?stats default_backend http_back backend http_back balance roundrobin server <Apache1> <10.0.0.30>:80 check server <Apache2> <10.0.0.35>:80 check" >> /etc/haproxy/haproxy.cfg && \ 
            reboot
